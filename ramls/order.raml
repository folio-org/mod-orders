#%RAML 1.0
title: Orders
baseUri: https://github.com/folio-org/mod-orders
version: v3
protocols: [ HTTP, HTTPS ]

documentation:
  - title: Orders Business Logic API
    content: <b>API for managing purchase orders</b>

types:
  composite-purchase-order: !include acq-models/composite_purchase_order.json
  purchase-orders: !include acq-models/mod-orders-storage/schemas/purchase_order_collection.json
  purchase_order: !include acq-models/mod-orders-storage/schemas/purchase_order.json
  composite-po-line: !include acq-models/composite_po_line.json
  po-line-collection: !include acq-models/mod-orders-storage/schemas/po_line_collection.json
  po-line: !include acq-models/mod-orders-storage/schemas/po_line.json
  checkin-collection: !include acq-models/mod-orders/schemas/checkinCollection.json
  receiving-collection: !include acq-models/mod-orders/schemas/receivingCollection.json
  receiving-results: !include acq-models/mod-orders/schemas/receivingResults.json
  # Using for now mod-orders-storage schema. Once agreed what kind of extra data is required, the new schema will be defined
  receiving-history-collection: !include acq-models/mod-orders-storage/schemas/receiving_history_collection.json
  errors: !include raml-util/schemas/errors.schema
  po-number: !include acq-models/mod-orders/schemas/po_number.json
  UUID:
    type: string
    pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$

traits:
  pageable: !include raml-util/traits/pageable.raml
  searchable: !include raml-util/traits/searchable.raml
  language: !include raml-util/traits/language.raml
  validate: !include raml-util/traits/validation.raml
  auth:
    responses:
      401:
        description: "Not authorized to perform requested action"
        body:
          text/plain:
            example: "unable to create <<resourcePathName|!singularize>> -- unauthorized"

resourceTypes:
  collection: !include raml-util/rtypes/collection.raml
  collection-item: !include raml-util/rtypes/item-collection.raml
  collection-get: !include raml-util/rtypes/collection-get.raml
  post-with-200: !include rtypes/post-json-body-200.raml

/orders:
  /composite-orders:
    displayName: Orders
    type:
      collection:
        exampleCollection: !include acq-models/mod-orders-storage/examples/purchase_order_collection.sample
        exampleItem: !include acq-models/examples/composite_purchase_order.sample
        schemaCollection: purchase-orders
        schemaItem: composite-purchase-order
    is: [validate]
    get:
      is: [pageable, searchable: {description: "using CQL (indexes for purchase orders)", example: "workflow_status==\"Pending\""} ]
    post:
      description: Post a purchase order (PO) and a number of PO lines; record fund transactions corresponding to the order
      is: [auth]
    /{id}:
      uriParameters:
        id:
          description: The UUID of a purchase order
          type: UUID
      type:
        collection-item:
          exampleItem: !include acq-models/examples/composite_purchase_order.sample
          schema: composite-purchase-order
      is: [validate]
      get:
        description: Return a purchase order with given {id}
      put:
        description: |
          Update a purchase order with given {id}
          - if request does not include po_lines or includes "po_lines": [] or "po_lines": null - update just purchase order summary
          - if request includes array of "po_lines" - update PO lines as per request
        responses:
          500:
            body:
              application/json:
                type: errors
                example:
                  strict: false
                  value: !include raml-util/examples/errors.sample
      delete:
        description: Delete a purchase order with given {id}
  /order-lines:
    displayName: Purchase Order Lines
    description: Manage purchase order (PO) lines
    type:
      collection:
        exampleCollection: !include acq-models/mod-orders-storage/examples/po_line_collection.sample
        exampleItem: !include acq-models/examples/composite_po_line.sample
        schemaCollection: po-line-collection
        schemaItem: composite-po-line
    is: [validate]
    get:
      is: [pageable, searchable: {description: "using CQL (indexes for PO lines)", example: "payment_status==\"Cancelled\""} ]
    post:
      description: Post a PO lines to corresponding PO
      is: [auth]
    /{id}:
      displayName: Purchase Order Line
      description: Manage purchase order line (PO line) by id
      uriParameters:
        id:
          description: The UUID of a purchase order line
          type: UUID
      type:
        collection-item:
          exampleItem: !include acq-models/examples/composite_po_line.sample
          schema: composite-po-line
      is: [validate]
      get:
        description: Return a purchase order line with given {id}
      put:
        description: Update a purchase order line with given {id}
        responses:
          500:
            body:
              application/json:
                type: errors
                example:
                  strict: false
                  value: !include raml-util/examples/errors.sample
      delete:
        description: Delete a purchase order line with given {id}
  /po-number:
    displayName: Purchase Order Lines Number
    description: Manage purchase order (PO) number
    get:
      description: Get generated PO number
      is: [validate, language]
      responses:
        200:
          body:
            application/json:
              type: po-number
              example:
                strict: false
                value: !include acq-models/mod-orders/examples/po_number_get.sample
        400:
          description: "Bad request, malformed request"
          body:
            text/plain:
              example: "Unable to generate purchase order number"
        500:
          description: "Internal server error"
          body:
            text/plain:
              example: "internal server error, contact administrator"
    /validate:
      displayName: PO Number Validation
      post:
        description: validate if the PO Number is unique and matches the pattern specified
        is: [validate, auth, language]
        body:
          application/json:
            type: po-number
            example:
              strict: false
              value: !include acq-models/mod-orders/examples/po_number_get.sample
        responses:
          204:
            description: "Valid PO Number"
          400:
            description: "Bad request, e.g. existing PO Number. Details of the error provided in the response."
            body:
              text/plain:
                example: |
                  "unable to add <<resourcePathName|!singularize>> -- malformed JSON at 13:3"
          500:
            description: "Internal server error, e.g. due to misconfiguration"
            body:
              text/plain:
                example: "Internal server error, contact administrator"
  /receive:
    displayName: Receive items
    description: Receive items spanning one or more PO lines
    type:
      post-with-200:
        requestSchema: receiving-collection
        responseSchema: receiving-results
        requestExample: !include acq-models/mod-orders/examples/receivingCollection.sample
        responseExample: !include acq-models/mod-orders/examples/receivingResults.sample
    is: [validate]
    post:
      description: Receive items spanning one or more PO lines
  /check-in:
    displayName: Check-in items
    description: Check-in items spanning one or more PO lines
    type:
      post-with-200:
        requestSchema: checkin-collection
        responseSchema: receiving-results
        requestExample: !include acq-models/mod-orders/examples/checkinCollection.sample
        responseExample: !include acq-models/mod-orders/examples/receivingResults.sample
    is: [validate]
    post:
      description: Check-in items spanning one or more po_lines in this order
  /receiving-history:
    get: 
      displayName: Receiving history
      description: Get receiving history matching the provided criteria
      is: [
       pageable,
       searchable: {
        description:
          "With valid searchable fields",
        example:
          "title==Harry Potter AND receiving_status==received sortBy po_line_number"
       },
       validate
      ]
    type:
      collection-get:
        exampleCollection: !include acq-models/mod-orders-storage/examples/receiving_history_collection.sample
        schemaCollection: receiving-history-collection
